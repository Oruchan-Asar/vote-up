generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   @db.Text
  reputation    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  topics        Topic[]
  comments      Comment[]
  votes         Vote[]
}

model Topic {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  published   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]

  @@index([authorId])
}

model Comment {
  id        String    @id @default(cuid())
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  topicId   String
  score     Int       @default(0)

  author    User      @relation(fields: [authorId], references: [id])
  topic     Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  votes     Vote[]
  tags      Tag[]

  @@index([authorId])
  @@index([topicId])
}

model Vote {
  id        String   @id @default(cuid())
  value     Int      // 1 for upvote, -1 for downvote
  userId    String
  commentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


